f<-summary(back)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "AIC Backward Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["back_AIC"]] <- g
rm(g,f,nvar,varNames)
}
}
return(list_of_table)
}
Variable_selection_regre <- function(dataset,criterion,varList,
modelflag = c("step_Pvalue","fwd_Pvalue","back_Pvalue","step_AIC","fwd_AIC","back_AIC","cforest","rforest","Boruta","Enet")
,rforestpara=c(500,2)){
################based on AIC################
if("step_AIC" %in% modelflag | "fwd_AIC" %in% modelflag  |"back_AIC" %in% modelflag){
#######Linear regression########
full <- lm(formula, data=dataset)
null <- lm(nullformula, data=dataset)
##############stepwise pvalue#########
if("step_AIC" %in% modelflag){
both<-step(null, scope=list(upper=full), direction="both")
f<-summary(both)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "AIC Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["step_AIC"]] <- g
rm(g,f,nvar,varNames)
}
##########forward selection of AIC##########
if("fwd_AIC" %in% modelflag){
forward<-step(null, scope=list(lower=null, upper=full), direction="forward")
f<-summary(forward)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g <- data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "AIC Forward Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["fwd_AIC"]] <- g
rm(g,f,nvar,varNames)
}
#############backward selection##################
if("back_AIC" %in% modelflag){
back<-step(full, direction="backward")
f<-summary(back)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "AIC Backward Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["back_AIC"]] <- g
rm(g,f,nvar,varNames)
}
}
return(list_of_table)
}
Variable_selection_regre <- function(dataset,criterion,varList,
modelflag = c("step_Pvalue","fwd_Pvalue","back_Pvalue","step_AIC","fwd_AIC","back_AIC","cforest","rforest","Boruta","Enet")
,rforestpara=c(500,2)){
list_of_table <- list()
formula = as.formula(paste(criterion, paste(varList, collapse=" + "), sep=" ~ "))
nullformula = as.formula(paste(criterion, "~1", sep=""))
####CONVERTING CATEGORICAL IN NUMERIC####
indx <- sapply(dataset, is.factor)
if(any(indx)){
dataset[,indx] <- lapply(dataset[indx], function(x) as.numeric(x))
}
if("step_Pvalue" %in% modelflag | "fwd_Pvalue" %in% modelflag  |"back_Pvalue" %in% modelflag){
#######Linear regression########
full <- lm(formula, data=dataset)
null <- lm(nullformula, data=dataset)
##############stepwise pvalue#########
if("step_Pvalue" %in% modelflag){
both<-step(null, scope=list(upper=full), direction="both", test="F")
f<-summary(both)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "pValue Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["step_Pvalue"]] <- g
rm(g,f,nvar,varNames)
}
##########forward selection of pvalue##########
if("fwd_Pvalue" %in% modelflag){
forward<-step(null, scope=list(lower=null, upper=full), direction="forward", test="F")
f<-summary(forward)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "pValue Forward Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["fwd_Pvalue"]] <- g
rm(g,f,nvar,varNames)
}
#############backward selection##################
if("back_Pvalue" %in% modelflag){
back<-step(full, direction="backward", test="F")
f<-summary(back)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "pValue Backward Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["back_Pvalue"]] <- g
rm(g,f,nvar,varNames)
}
}
################based on AIC################
if("step_AIC" %in% modelflag | "fwd_AIC" %in% modelflag  |"back_AIC" %in% modelflag){
#######Linear regression########
full <- lm(formula, data=dataset)
null <- lm(nullformula, data=dataset)
##############stepwise pvalue#########
if("step_AIC" %in% modelflag){
both<-step(null, scope=list(upper=full), direction="both")
f<-summary(both)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "AIC Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["step_AIC"]] <- g
rm(g,f,nvar,varNames)
}
##########forward selection of AIC##########
if("fwd_AIC" %in% modelflag){
forward<-step(null, scope=list(lower=null, upper=full), direction="forward")
f<-summary(forward)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g <- data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "AIC Forward Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["fwd_AIC"]] <- g
rm(g,f,nvar,varNames)
}
#############backward selection##################
if("back_AIC" %in% modelflag){
back<-step(full, direction="backward")
f<-summary(back)$coefficients
nvar = nrow(f)-1
varNames = rownames(f)
g<-data.frame("Variables"=varNames[2:nrow(f)], "pValue" = f[2:nrow(f),4])
g <- cbind(g[order(g$pValue),], "AIC Backward Rank" = c(1:nvar))
rownames(g) <- 1:nrow(g)
list_of_table[["back_AIC"]] <- g
rm(g,f,nvar,varNames)
}
}
######################cforest function###############
ntree = rforestpara[1]
mtry =  rforestpara[2]
if("cforest" %in% modelflag){
if(mtry<length(dataset)){
cf1 <- cforest(formula, data=dataset, controls = cforest_unbiased(ntree = ntree, mtry = mtry))
v <- varimp(cf1)
v1 <- as.data.frame(sort(v, decreasing = TRUE))
v1Names <- rownames(v1)
v1 <- cbind(data.frame("Variables"=v1Names), v1, data.frame("cForest Rank" = 1:nrow(v1)))
rownames(v1)<-1:nrow(v1)
colnames(v1)[2]<- "Importance"
list_of_table[["cforest"]] <- v1
rm(v,v1)}
else{print("Mtry should be less than or equal to no of independent variable")}
}
##############Random Forest###############
if("rforest" %in% modelflag){
dataset <- droplevels(dataset)
if(mtry<length(dataset)){
if(!is.null(dataset)){
rf_model = randomForest(formula, data=dataset, ntree = ntree, mtry = mtry)
importance <- randomForest::importance(rf_model)
#Classification
if(class(dataset[[criterion]])=="factor"){
varImportance <- data.frame("Variables" = row.names(importance),
"Importance" = round(importance[ ,'MeanDecreaseGini'],2))
}
else{
#Regression
varImportance <- data.frame("Variables" = row.names(importance),
randomForest::importance(rf_model, type=2))
}
names(varImportance)<-c("Variables", "Importance")
varImportance <- cbind(varImportance[order(-varImportance$Importance),],
data.frame("Random Forest Rank" =1:nrow(varImportance)))
rownames(varImportance) <- 1:nrow(varImportance)
list_of_table[["rforest"]] <- varImportance
}
else{list_of_table[["rforest"]] <-"Error in dataet, some value is null or NA"}}
else{print("Mtry should be less than or equal to no of independent variable")}
}
#####################Boruta########################
if("Boruta" %in% modelflag){
print("Boruta Algorithm in progress")
if(!is.null(dataset)){
boruta_output <- Boruta(formula, data=dataset, doTrace = 1)
boruta_trial <- data.frame(attStats(boruta_output)[1], attStats(boruta_output)[6])
boruta_trial <- subset(boruta_trial, grepl("Confirmed|Tentative", boruta_trial$decision))
boruta_trial <- cbind("Variables" = rownames(boruta_trial), boruta_trial)
boruta_trial <- cbind(boruta_trial[order(-boruta_trial$meanImp),], data.frame("Boruta Rank" = 1:nrow(boruta_trial)))
rownames(boruta_trial) <- c(1:nrow(boruta_trial))
names(boruta_trial)<-c("Variables", "Importance", "Status", "Boruta Rank")
list_of_table[["boruta"]] <- boruta_trial
}
else{list_of_table[["boruta"]] <- "Error in dataet, some value is null or NA"}
}
################elstic net and lasso#################
if("Enet" %in% modelflag){
dataset <- dataset[complete.cases(dataset),]
model = model.matrix(formula, data = as.data.frame(dataset))
model = model[,-1]
glmnet1<-cv.glmnet(x=model , y=dataset[[criterion]], type.measure='mse', nfolds=5, alpha=1)
coeff <- coef(glmnet1,s='lambda.min', exact=TRUE)
accept <- which(coeff!=0)
variables<- data.frame(row.names(coeff)[accept], coeff[accept])
names(variables) <- c("Variables", s)
variables <- variables[variables$Variables!="(Intercept)",]
variables <- cbind(variables[order(variables[[s]]),], data.frame("Elastic Net Rank"=1:nrow(variables)))
row.names(variables) <- 1:nrow(variables)
list_of_table[["Enet"]] <- variables
}
FinalResult <- data.frame("Variables" = varList)
for(i in names(list_of_table)){
Temp <- list_of_table[i]
Temp <- as.data.frame(Temp)
colnames(Temp) <- gsub(paste0(i,"."),"",colnames(Temp))
colnames(Temp) <- gsub("\\."," ",colnames(Temp))
Temp <- Temp[,c(1,3)]
FinalResult <- dplyr::left_join(FinalResult,Temp,by = "Variables")
}
FinalResult[,"Overall Rank"]<- rank(rowSums(FinalResult[, 2:ncol(FinalResult)]), na.last=TRUE, ties.method="min")
FinalResult[,"Chosen by number of algorithms"]<- (rowSums(!is.na(FinalResult[1:nrow(FinalResult),]))-2)
FinalResult <- FinalResult[,c(1,(length(FinalResult)-1),length(FinalResult),2:(length(FinalResult)-2))]
list_of_table[["FinalTable"]] <- FinalResult
return(list_of_table)
}
Variable_selection_regre()
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
data(cars)
data(iris)
DataDfC <- data.table(cars)
library(data.table)
data(cars)
data(iris)
DataDfC <- data.table(cars)
DataDfI <- data.table(iris)
iris
DataDfI
DataDfI[,Sepal.Length,]
DataDfI[,Sepal.Length,with=F]
DataDfI
DataDfI[Sepal.Length > mean(Sepal.Length) ,,]
DataDfI[,"Sepal.Length",]
DataDfI[,c("Sepal.Width","Sepal.Length"),]
DataDfI[Sepal.Length > mean(Sepal.Length),c("Sepal.Length","Sepal.Length"),]
library(data.table)
library(data.table)
setwd("D:\\Rough\\CapabilityDev\\Datatable")
data(cars)
data(iris)
DataDfC <- data.table(cars)
DataDfI <- data.table(iris)
DataDf <- data.table(iris) #Assume iris is a dataframe
write.csv(DataDf,"Data/iris.csv")
ids <- letters
values <- seq(1,26,1)
DataDf <- data.table(Column = ids, Value = values)
DataDf <- as.data.table(as.matrix(iris))
DataDf <- fread("Data/iris.csv")
DataDfI[,Sepal.Area := Sepal.Length * Sepal.Width,]
DataDfI
DataDfI
DataDfI
DataDfI[,`:=`(Sepal.Area = Sepal.Length * Sepal.Width,
Petal.Area = Petal.Length * Petal.Width),]
DataDfI
DataDfI
DataDfI[Species == "setosa" & Petal.Length == 4.5,,]
DataDfI[Species == "setosa",,]
DataDfI[Species == "setosa" & Petal.Length == 1.4,,]
DataDfI[Species == "setosa" & Petal.Length == 1.4,Sepal.Area:=45,]
DataDfI[Species == "setosa" & Petal.Length == 1.4,,]
DataDfI[Species == "setosa" & Petal.Length == 1.4,Sepal.Area:=(Sepal.Length/Sepal.Width),]
DataDfI[Species == "setosa" & Petal.Length == 1.4,,]
DataDfI[,list(AvgSepalLength = mean(Sepal.Length),
AvgSepalWidth = mean(Sepal.Width)),by=list(Species)]
DataDfI[,list(AvgSepalLength = mean(Sepal.Length),
AvgSepalWidth = mean(Sepal.Width),
AvgPetalLength = mean(Petal.Length),
AvgPetalWidth = mean(Petal.Width)),by=list(Species)]
DataDfI[,list(Count = .N),by=list(Species)]
DataDfI[,list(UniquesSepalLength = length(unique(Sepal.Length)),
UniquesSepalWidth = length(unique(Sepal.Width)),
UniquesPetalLength = length(unique(Petal.Length)),
UniquesPetalWidth = length(unique(Petal.Width))),by=list(Species)]
DataDfI[,list(AvgSepalLength = mean(Sepal.Length),
AvgSepalWidth = mean(Sepal.Width)),by=list(Species)]
DataDfI[,list(AvgSepalLength = mean(Sepal.Length),
AvgSepalWidth = mean(Sepal.Width)),by=list(Species)]
colnames(DataDfI)
DataDfI[,list(AvgSepalLength = mean(Sepal.Length),
AvgSepalWidth = mean(Sepal.Width)),
by=list(Species)]
sum(is.na(DataDfI))
DataDfI[,list(AvgSepalLength = mean(Sepal.Length),
AvgSepalWidth = mean(Sepal.Width)),
by=list(Species)]
colnames(DataDfI)
DataDfI[,SpeciesLength := nchar(Sepcies),]
DataDfI[,SpeciesLength := nchar(Species),]
str(DataDfI)
DataDfI[,Species:=as.character(Species),]
DataDfI[,SpeciesLength := nchar(Species),]
DataDfI
DataDfI
DataDfI[,SpeciesLength := (nchar(Species)*Petal.Length * Petal.Width),]
DataDfI
DataDfI[,SpeciesLength := nchar(Species),by=1:nrow(DataDfI)]
DataDfI[,SpeciesLength:=NULL,]
DataDfI[,SpeciesLength := nchar(Species),by=1:nrow(DataDfI)]
DataDfI
DataDfI[,SumLengths:=rowSums(.SD),.SDCols = c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")]
DataDfI[,SumLengths:=rowSum(.SD),.SDCols = c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")]
DataDfI[,SumLengths:=rowsum(.SD),.SDCols = c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")]
DataDfI[,SumLengths:=rowSums(.SD),.SDCols = c("Petal.Length","Petal.Width")]
DataDfI[,SumLengths:=rowSums(.SD, na.rm = T),.SDCols = c("Petal.Length","Petal.Width")]
class(DataDfI)
DataDfI[,Sums:=rowSums(.SD, na.rm = T),.SDCols = c("Petal.Length","Petal.Width")]
DataDfI[,Sums:=rowSums(.SD, na.rm = T),.SDcols = c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")]
DataDfI
rm(list = ls())
library(data.table)
library(ggplot2)
library(RCurl)
library(XML)
library(httr)
library(rvest)
library(rjson)
samplemap <- rjson::fromJSON(file = "http://electionresults.republicworld.com/data/S10/S10_2018_color_map.json")
ymd_hm(format("2017-06-09 00:20:36 UTC",format='%Y-%m-%d %H:%M'))
library(lubridate)
ymd_hm(format("2017-06-09 00:20:36 UTC",format='%Y-%m-%d %H:%M'))
ymd_hm(format("2017-06-09 00:20:36",format='%Y-%m-%d %H:%M'))
ymd_hm(format("2017-06-09 00:20:36 UTC",format='%Y-%m-%d %H:%M:%S'))
ymd_hm("2017-06-09 00:20:36")
ymd_hms("2017-06-09 00:20:36")
yo <- ymd_hms("2017-06-09 00:20:36")
ymd_hm(yo)
df <- data(iris)
df <- iris
df
df <- data.table(df)
library(data.table)
df <- data.table(df)
cols <- colnames(df)
cols <- cols[cols!="Species"]
df <- data.table(df)
cols <- colnames(df)
cols <- cols[cols!="Species"]
cols
for(i in cols){
df[,(i):=as.numeric(get(i)),]
}
maxvec <- c()
for(i in cols){
maxvec <- append(maxvec,max(df[,get(i),]))
}
maxvec
y <- sum(maxvec)
y
data(mtcars)
df <- mtcars
df
df <- data.table(df)
df
cols <- c("mpg","hp")
df <- mtcars
df <- cbind(mtcars,rownames(mtcars))
df
df <- cbind(mtcars,manu = rownames(mtcars))
df
df <- cbind(mtcars,manu = rownames(mtcars))
df <- data.table(df)
df
cols <- c("manu","mpg","hp")
df <- df[,(cols),with=F]
df
for(i in c("mpg","hp")){
df[,(i):=as.numeric(get(i)),]
}
df
df
df <- df[,(cols),with=F]
df <- mtcars
df <- cbind(mtcars,manu = rownames(mtcars))
df
df <- data.table(df)
df
cols <- c("manu","mpg","hp")
df <- df[,(cols),with=F]
for(i in c("mpg","hp")){
df[,(i):=as.numeric(get(i)),]
}
dfAgg <- df[,list(mpg = mean(mpg), hp = mean(hp)),
by= list(manu)]
dfAgg
df[,manuname:=strsplit(manu," ")[[1]][1],]
str(df)
df[,manu:=as.character(manu),]
df[,manuname:=strsplit(manu," ")[[1]][1],]
df
df[,manuname:=strsplit(manu," ")[[1]][1],by=1:nrow(df)]
df
df[,manu:=NULL,]
df
dfAgg <- df[,list(mpg = mean(mpg), hp = mean(hp)),
by= list(manuname)]
dfAgg
setorder(dfAgg,-mpg)
dfAgg
dfAgg[,mpgRank:=seq(1,nrow(dfAgg),1),]
dfAgg
setorder(dfAgg,-hp)
dfAgg
dfAgg[,hpRank:=seq(1,nrow(dfAgg),1),]
dfAgg
dfAgg[,AggRank:=(0.6*mpgRank + 0.4(hpRank)),]
dfAgg[,AggRank:=((0.6*mpgRank) + (0.4*hpRank)),]
dfAgg
setorder(dfAgg,AggRank)
dfAgg
x <- 154
y <- 20
x <- as.numeric(x)
y <- as.numeric(y)
x%%y
x <- 100
y <- 20
x <- as.numeric(x)
y <- as.numeric(y)
x%%y
x%y
x%/%y
x <- 110
y <- 20
x <- as.numeric(x)
y <- as.numeric(y)
x%%y
x%/%y
x <- 10
y <- 3
x <- as.numeric(x)
y <- as.numeric(y)
remainder <- x%%y
quotient <- x%/%y
minsteps <- as.numeric(remainder + quotient)
minsteps
x <- 10^9
y <- 10^8
x <- as.numeric(x)
y <- as.numeric(y)
remainder <- x%%y
quotient <- x%/%y
remainder
quotient
minsteps <- as.numeric(remainder + quotient)
minsteps
#Installing the package
# devtools::install_github("rstudio/blogdown")
#Setting the work directory
rm(list = ls())
setwd("D:/Personal/Blog/BlogMain")
#Loading the package
library(blogdown)
#Installing hugo
# install_hugo() #Not happening - Had to install manually
#Creating a new site
# new_site()
# blogdown::new_site(theme = "mtn/cocoa-eh-hugo-theme")
blogdown::serve_site()
#Installing the package
# devtools::install_github("rstudio/blogdown")
#Setting the work directory
rm(list = ls())
setwd("D:/Personal/Blog/BlogMain")
#Loading the package
library(blogdown)
#Installing hugo
# install_hugo() #Not happening - Had to install manually
#Creating a new site
# new_site()
# blogdown::new_site(theme = "mtn/cocoa-eh-hugo-theme")
blogdown::serve_site()
#Installing the package
# devtools::install_github("rstudio/blogdown")
#Setting the work directory
rm(list = ls())
setwd("D:/Personal/Blog/BlogMain")
#Loading the package
library(blogdown)
#Installing hugo
# install_hugo() #Not happening - Had to install manually
#Creating a new site
# new_site()
# blogdown::new_site(theme = "mtn/cocoa-eh-hugo-theme")
blogdown::serve_site()
